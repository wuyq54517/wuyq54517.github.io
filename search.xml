<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ServiceNow 稿件</title>
      <link href="/2023/08/03/ServiceNow-%E7%A8%BF%E4%BB%B6/"/>
      <url>/2023/08/03/ServiceNow-%E7%A8%BF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="ServiceNow-稿件"><a href="#ServiceNow-稿件" class="headerlink" title="ServiceNow 稿件"></a>ServiceNow 稿件</h1><p> 以下内容是ServiceNow Scripted Rest Rersources的创建和使用postman进行请求，用车辆相关的信息为例，核心是先在Servicenow上建立五个API，分别代表五个功能，再使用postman对上述API进行请求并获得响应体。</p><h2 id="Create-Vehicles"><a href="#Create-Vehicles" class="headerlink" title="Create Vehicles"></a>Create Vehicles</h2><p>Create Vehicles，用于添加一条或多条车辆信息，其HTTP method为POST，相对路径为“&#x2F;vehicles”。脚本代码主要通过从请求体中获取车辆信息，并利用Servicenow提供的API,建立一个GlideRecord类型的对象，来执行初始化和数据导入，最后返回车辆的全部信息。</p><p>然后利用postman进行测试，请求体包括一辆汽车的全部信息，请求后收到的响应体是每辆车vin。</p><h2 id="Delete-Vehicles"><a href="#Delete-Vehicles" class="headerlink" title="Delete Vehicles"></a>Delete Vehicles</h2><p>Delete Vehicles，用于删除某辆车的全部信息，其HTTP method为DELETE，相对路径为“&#x2F;vehicle&#x2F;{vin}”。脚本代码，通过从url中获取vin，并利用Servicenow提供的API,建立一个GlideRecord类型的对象，来执行车辆查询和数据删除，成功删除后返回删除车辆的全部信息”。</p><p>然后利用postman进行测试，URL中包括的是vin，请求后收到的响应体是成功删除的车辆的全部信息和还有“Vehicle deleted.”。</p><h2 id="Get-Vehicle"><a href="#Get-Vehicle" class="headerlink" title="Get Vehicle"></a>Get Vehicle</h2><p>Get Vehicle，用于查询一车辆的全部信息，其HTTP method为GET，相对路径为“&#x2F;vehicle&#x2F;{vin}”。脚本代码，通过从url中获取车辆vin，并利用Servicenow提供的API,建立一个GlideRecord类型的对象，来执行车辆查询，成功查询后返回车辆的全部信息。</p><p>然后利用postman进行测试，URL中包括的车辆的vin，请求后收到的响应体是车辆的全部信息。</p><h2 id="Get-Vehicles"><a href="#Get-Vehicles" class="headerlink" title="Get Vehicles"></a>Get Vehicles</h2><p>Get Vehicles，用于查询所有满足此条件车辆的全部信息，其HTTP method为GET，相对路径为“&#x2F;vehicle”。脚本代码通过从url中获取查询条件，并利用Servicenow提供的API,建立一个GlideRecord类型的对象，来按照上述查询条件，查询所有满足条件的车辆，成功查询后返回被查询车辆的全部信息。</p><p>然后利用postman进行测试，URL中包括的是要查询的一类车辆信息的某个特征，请求后收到的响应体是满足条件的车辆的信息。</p><h2 id="Update-Vehicle"><a href="#Update-Vehicle" class="headerlink" title="Update Vehicle"></a>Update Vehicle</h2><p>Update Vehicle，通过输入某一车辆vin，和需要更新的部分信息，来实现数据更新，其HTTP method为PATCH，相对路径为“&#x2F;vehicle&#x2F;{vin}”。脚本代码，通过从请求体中获取汽车的vin和要更新数据，并利用Servicenow提供的API,建立一个GlideRecord类型的对象，依次查询是否有满足上述vin的车辆，如果有则对此车辆信息进行更新，成功更新后返回被更新车辆的全部信息。</p><p>然后利用postman进行测试，URL中包括的是车辆的vin，请求体中是车辆的一些信息，收到的响应体是车辆的全部信息。</p>]]></content>
      
      
      <categories>
          
          <category> ServiceNow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> myself2 </tag>
            
            <tag> ServieNow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows和linux同步数据</title>
      <link href="/2023/08/03/windows%E5%92%8Clinux%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/08/03/windows%E5%92%8Clinux%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz -e &quot;D:\software\cygwin64\bin\ssh.exe -i &#x27;C:/Users/lenovo/.ssh/id_rsa&#x27;&quot; --progress /cygdrive/D/系统默认/qycache/作业/github/wuyq54517.github.io/wuyq54517.github.io/source/ root@ahk.123417.xyz:/root/docker/hexo/blog/source/</span><br></pre></td></tr></table></figure><blockquote><p>rsync -avz -e “D:\software\cygwin64\bin\ssh.exe” –progress &#x2F;cygdrive&#x2F;D&#x2F;系统默认&#x2F;qycache&#x2F;作业&#x2F;github&#x2F;wuyq54517.github.io&#x2F;wuyq54517.github.io&#x2F;source&#x2F;<br><a href="mailto:&#114;&#x6f;&#111;&#116;&#x40;&#97;&#x68;&#107;&#x2e;&#49;&#50;&#x33;&#52;&#x31;&#x37;&#x2e;&#x78;&#121;&#x7a;">&#114;&#x6f;&#111;&#116;&#x40;&#97;&#x68;&#107;&#x2e;&#49;&#50;&#x33;&#52;&#x31;&#x37;&#x2e;&#x78;&#121;&#x7a;</a>:&#x2F;root&#x2F;docker&#x2F;hexo&#x2F;blog&#x2F;source&#x2F;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>introduction myself</title>
      <link href="/2023/07/31/introduction-myself/"/>
      <url>/2023/07/31/introduction-myself/</url>
      
        <content type="html"><![CDATA[<h2 id="哈哈哈哈哈"><a href="#哈哈哈哈哈" class="headerlink" title="哈哈哈哈哈"></a>哈哈哈哈哈</h2><p>我的名字叫做，Wu Yikky。</p><p><img src="https://wuyiqi.obs.cn-north-1.myhuaweicloud.com/tuchuang/202307312330563.jpg" alt="1678080547"></p>]]></content>
      
      
      <categories>
          
          <category> myself </category>
          
          <category> myself2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> myself </tag>
            
            <tag> myself2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
